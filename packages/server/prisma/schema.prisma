generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                         @id @default(autoincrement())
  vkId                       String                      @unique
  vkData                     Json?
  firstName                  String?
  lastName                   String?
  avatarUrls                 Json?
  createdAt                  DateTime                    @default(now()) @db.Timestamptz(3)
  translations               Translation[]
  stacks                     Stack[]
  stacksTranslations         TranslationInStack[]
  userTranslationRepetitions UserTranslationRepetition[]
  selectedLanguageId         Int?
  selectedLanguage           Language?                   @relation(fields: [selectedLanguageId], references: [id])
  reactionsOnTranslations    ReactionOnTranslation[]
  reactoinsOnStacks          ReactionOnStack[]
  comments                   Comment[]
}

model Translation {
  id                         Int                         @id @default(autoincrement())
  authorId                   Int
  vernacular                 String
  foreign                    String
  example                    String?
  stacks                     TranslationInStack[]
  userTranslationRepetitions UserTranslationRepetition[]
  languageId                 Int
  languageVariationId        Int?
  foreignDescription         String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now())

  tags              Tag[]
  author            User                    @relation(fields: [authorId], references: [id])
  language          Language                @relation(fields: [languageId], references: [id])
  languageVariation LanguageVariation?      @relation(fields: [languageVariationId], references: [id])
  transcriptions    Transcription[]
  reactions         ReactionOnTranslation[]
  comments          Comment[]
}

model Comment {
  id Int @id @default(autoincrement())

  translationId Int
  userId        Int
  createdAt     DateTime @default(now())
  isEdited      Boolean  @default(false)
  isDeleted     Boolean  @default(false)

  text String

  translation Translation @relation(fields: [translationId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model ReactionOnStack {
  stackId   Int
  userId    Int
  createdAt DateTime @default(now())

  stack Stack @relation(fields: [stackId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([stackId, userId])
}

model ReactionOnTranslation {
  translationId Int
  userId        Int
  createdAt     DateTime @default(now())

  translation Translation @relation(fields: [translationId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([translationId, userId])
}

model Transcription {
  id                  Int    @id @default(autoincrement())
  translationId       Int
  languageVariationId Int?
  transcription       String

  translation       Translation        @relation(fields: [translationId], references: [id])
  languageVariation LanguageVariation? @relation(fields: [languageVariationId], references: [id])
}

model Stack {
  id              Int     @id @default(autoincrement())
  authorId        Int
  name            String
  description     String?
  isVerified      Boolean @default(false)
  inheritsStackId Int?

  translations   TranslationInStack[]
  reactions      ReactionOnStack[]
  tags           Tag[]
  author         User                 @relation(fields: [authorId], references: [id])
  inheritStack   Stack?               @relation("inherit", fields: [inheritsStackId], references: [id])
  inheritedStack Stack[]              @relation("inherit")
}

model TranslationInStack {
  translationId Int
  stackId       Int
  addedBy       Int
  addedAt       DateTime @default(now())

  translation Translation @relation(fields: [translationId], references: [id])
  stack       Stack       @relation(fields: [stackId], references: [id])
  addedByUser User        @relation(fields: [addedBy], references: [id])

  @@id([translationId, stackId])
}

model Language {
  id           Int                 @id @default(autoincrement())
  name         String
  iconUrl      String
  variations   LanguageVariation[]
  users        User[]
  translations Translation[]
}

model LanguageVariation {
  id         Int    @id @default(autoincrement())
  languageId Int
  name       String
  iconUrl    String

  language       Language        @relation(fields: [languageId], references: [id])
  transcriptions Transcription[]
  translations   Translation[]
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  translations Translation[]
  stacks       Stack[]
}

model UserTranslationRepetition {
  userId        Int
  translationId Int
  repeatedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  translation Translation @relation(fields: [translationId], references: [id])

  @@id([userId, translationId, repeatedAt])
}
