generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  vkId       String   @unique
  vkData     Json?
  firstName  String?
  lastName   String?
  avatarUrls Json?
  createdAt  DateTime @default(now()) @db.Timestamptz(3)

  canDeleteOthersComments     Boolean @default(false)
  canModifyOthersTranslations Boolean @default(false)
  canViewReports              Boolean @default(false)

  translations                    Translation[]
  stacks                          Stack[]
  stacksTranslations              TranslationInStack[]
  userTranslationRepetitions      UserTranslationRepetition[]
  selectedLanguageId              Int?
  selectedLanguage                Language?                         @relation(fields: [selectedLanguageId], references: [id])
  reactionsOnTranslations         ReactionOnTranslation[]
  reactoinsOnStacks               ReactionOnStack[]
  comments                        Comment[]
  gameSessions                    GameSession[]
  userProfile                     UserProfile?
  UserDailyStatistic              UserDailyStatistic[]
  UserRankedSeasonStatistic       UserRankedSeasonStatistic[]
  FiveLetterWordOfDayUserProgress FiveLetterWordOfDayUserProgress[]
  ReportOnTranslation             ReportOnTranslation[]
}

model Translation {
  id                  Int      @id @default(autoincrement())
  authorId            Int
  vernacular          String
  foreign             String
  example             String?
  languageId          Int
  languageVariationId Int?
  foreignDescription  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
  isPrivate           Boolean  @default(false)
  isHiddenInFeed      Boolean  @default(false)
  forRanked           Boolean  @default(false)

  stacks                     TranslationInStack[]
  userTranslationRepetitions UserTranslationRepetition[]
  tags                       Tag[]
  author                     User                        @relation(fields: [authorId], references: [id])
  language                   Language                    @relation(fields: [languageId], references: [id])
  languageVariation          LanguageVariation?          @relation(fields: [languageVariationId], references: [id])
  transcriptions             Transcription[]
  reactions                  ReactionOnTranslation[]
  comments                   Comment[]
  TranslationInGameSession   TranslationInGameSession[]
  ReportOnTranslation        ReportOnTranslation[]
}

model Comment {
  id Int @id @default(autoincrement())

  translationId Int
  userId        Int
  createdAt     DateTime @default(now())
  isEdited      Boolean  @default(false)
  isDeleted     Boolean  @default(false)

  text String

  translation Translation @relation(fields: [translationId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model ReactionOnStack {
  stackId   Int
  userId    Int
  createdAt DateTime @default(now())

  stack Stack @relation(fields: [stackId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([stackId, userId])
}

model ReactionOnTranslation {
  translationId Int
  userId        Int
  createdAt     DateTime @default(now())

  translation Translation @relation(fields: [translationId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([translationId, userId])
}

model Transcription {
  id                  Int    @id @default(autoincrement())
  translationId       Int
  languageVariationId Int?
  transcription       String

  translation       Translation        @relation(fields: [translationId], references: [id])
  languageVariation LanguageVariation? @relation(fields: [languageVariationId], references: [id])
}

model Stack {
  id              Int     @id @default(autoincrement())
  authorId        Int
  name            String
  description     String?
  isVerified      Boolean @default(false)
  inheritsStackId Int?
  isPrivate       Boolean @default(false)
  isDeleted       Boolean @default(false)
  isHiddenInFeed  Boolean @default(false)

  pattern  String?
  palette  Int?
  imageUrl String?

  translations   TranslationInStack[]
  reactions      ReactionOnStack[]
  tags           Tag[]
  author         User                 @relation(fields: [authorId], references: [id])
  inheritStack   Stack?               @relation("inherit", fields: [inheritsStackId], references: [id])
  inheritedStack Stack[]              @relation("inherit")
  gameSessions   GameSession[]
  categories     Category[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String
  stacks Stack[]
}

model TranslationInStack {
  translationId Int
  stackId       Int
  addedBy       Int
  addedAt       DateTime @default(now())

  translation Translation @relation(fields: [translationId], references: [id])
  stack       Stack       @relation(fields: [stackId], references: [id])
  addedByUser User        @relation(fields: [addedBy], references: [id])

  @@id([translationId, stackId])
}

model Language {
  id      Int    @id @default(autoincrement())
  name    String
  iconUrl String

  variations   LanguageVariation[]
  users        User[]
  translations Translation[]
}

model LanguageVariation {
  id         Int    @id @default(autoincrement())
  languageId Int
  name       String
  iconUrl    String

  language       Language        @relation(fields: [languageId], references: [id])
  transcriptions Transcription[]
  translations   Translation[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  translations Translation[]
  stacks       Stack[]
}

model UserTranslationRepetition {
  userId        Int
  translationId Int
  repeatedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  translation Translation @relation(fields: [translationId], references: [id])

  gainedXp Boolean

  @@id([userId, translationId, repeatedAt])
}

enum GameSessionStatus {
  playing
  cancelled
  ended
}

enum GameSessionType {
  default
  ranked
}

model GameSession {
  id        Int               @id @default(autoincrement())
  userId    Int
  startedAt DateTime          @default(now())
  endedAt   DateTime?
  status    GameSessionStatus @default(playing)

  type                     GameSessionType @default(default)
  gameDuration             Int?
  correctAnswerAddDuration Int?
  wrongAnswerSubDuration   Int?
  attemptsCount            Int?
  repeatCards              Boolean?

  stacks       Stack[]
  user         User                       @relation(fields: [userId], references: [id])
  translations TranslationInGameSession[]
}

enum TranslationInGameSessionStatus {
  correct
  incorrect
  unanswered
}

model TranslationInGameSession {
  gameSessionId Int
  translationId Int
  order         Int
  status        TranslationInGameSessionStatus @default(unanswered)
  answeredAt    DateTime?

  gameSession GameSession @relation(fields: [gameSessionId], references: [id])
  translation Translation @relation(fields: [translationId], references: [id])

  @@id([gameSessionId, order])
}

model UserProfile {
  userId Int @unique

  xp Int @default(0)

  user User @relation(fields: [userId], references: [id])
}

model UserDailyStatistic {
  userId Int
  date   DateTime

  xp                    Int     @default(0)
  points                Int     @default(0)
  gamesPlayed           Int     @default(0)
  rankedGamesPlayed     Int     @default(0)
  fiveLetterWordGuessed Boolean @default(false)

  user User @relation(fields: [userId], references: [id])

  @@id([userId, date])
}

model RankedSeason {
  id       Int      @id @default(autoincrement())
  startsAt DateTime
  endsAt   DateTime

  UserRankedSeasonStatistic UserRankedSeasonStatistic[]
}

model UserRankedSeasonStatistic {
  userId         Int
  rankedSeasonId Int

  user         User         @relation(fields: [userId], references: [id])
  rankedSeason RankedSeason @relation(fields: [rankedSeasonId], references: [id])

  points Int @default(0)

  @@id([userId, rankedSeasonId])
}

model FiveLetterWord {
  word                 String                @unique
  wordOfDays           FiveLetterWordOfDay[]
  canBeUsedAsWordOfDay Boolean               @default(false)
}

model FiveLetterWordOfDay {
  date DateTime @unique

  wordData FiveLetterWord @relation(fields: [word], references: [word])
  word     String
}

model FiveLetterWordOfDayUserProgress {
  userId Int
  date   DateTime

  progress String[]

  user User @relation(fields: [userId], references: [id])

  @@id([userId, date])
}

enum ReportStatus {
  opened
  resolved
  cancelled
}

model ReportOnTranslation {
  id            Int          @id @default(autoincrement())
  reportedById  Int
  reportedAt    DateTime     @default(now())
  translationId Int
  status        ReportStatus @default(opened)
  reason        String
  note          String?

  reportedBy  User        @relation(fields: [reportedById], references: [id])
  translation Translation @relation(fields: [translationId], references: [id])
}
